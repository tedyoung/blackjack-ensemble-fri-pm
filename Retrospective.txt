Retrospective: Ensemble Orange #15 (July 21, 2022)
--------------------------------------------------
Thoughts, Observations
    Moment of beauty to use the Consumer<Game> to refactor the GameService command methods
    Found a bug in the deserialization (toDomain) of our GameDbo translator! (returned immutable Deck)
    Creating a “paired” test of the GameServiceTest to use the same test code for the “real” JDBC Repository
        Using ParameterizedTest to enable this
    Feels like we got a lot done: everything’s Hexagonal
Learnings
    Functional interfaces and passing around lambdas (e.g., Consumer)
    Stream toList() is Immutable!


Retrospective: Ensemble Orange #14 (July 14, 2022)
--------------------------------------------------
Thoughts, Observations
    Lots of shortcuts in chat today
    Got more clear on Repository Adapter
        Was quick and straightforward as all the work was done in the Dbo itself
    Separated out @Bean configuration into its own configuration class for test to override in @TestConfiguration
    Single method interface (SAM) can be implemented as an “empty” lambda (or a lambda that does things)
    Nice to see HexArch ArchUnit tests
    In Hexagon, adapters are separate (vs. Onion/Clean)
    Like the color coding of files (Thanks!)
    Instead of Parallel change to the GameService constructor, introduced the constant (lambda) and then used Expose Hidden Details Maneuver
    Adapter returns different instance of object
    Doesn't feel good that the application was broken, despite all tests green
        GameService never saved the modified Game object back to the repository
Learnings
    Alt+F12 or Option+F12 to open/close Terminal
    Postfix .return
    Shift+Enter during class search to open on the right pane


Retrospective: Ensemble FRI-PM #13 (July 1, 2022)
-------------------------------------------------
Thoughts, Observations
    Helps to have a Facilitator!
        Even if not a “learning ensemble”
    Machine setup
    Stumbling around, would’ve started at an inner layer instead of writing at a higher level
    Driver -> Navigator order (vs. Navigator becomes Driver)
        Felt natural
    When most don’t know what to do, single navigator shifts to group navigator
        Driver learns a little bit — have expert Navigate and those who don’t know Drive
    Not sure how to contribute ideas for cleanup


Retrospective: Ensemble FRI-PM #12 (June 24, 2022)
--------------------------------------------------
Thoughts, Observations
    Changing direction: working on Deck first, instead of Dealer Hand
        They’re orthogonal, so not much of a different which to do first
            New Deck constructor was needed, vs new Game constructor (to take DealerHand) would be needed
    Predicting before running tests more often
    Separate the generation of the cards from the “holding” of the cards (Deck)
        Separate class for creating a list of cards
    Prepare refactor (extract field)
    Ignored test: danger may forget to unignore it!
        Don’t comment out when moving between layers
        Two tests failing at different boundaries is “ok”, at the same boundary
    Interesting to see errors in writing the Test, then noticing the test failing NOT as expected
        In addition the error in the code made it a bit harder to see
            When lost: Delete code and test and try again
    Tests are easier at “lower/inner” layers
        Testing/coding closer to the object is easier
Learnings
Next Time
    Can we introduce a Decoder (stub) object


Retrospective: Ensemble FRI-PM #11 (June 17, 2022)
--------------------------------------------------
Thoughts, Observations
    Returning Stream instead of List for cards was a good idea, show that it’s read-only
        Tension between encapsulation and allowing state to be retrieved for persistence
    Adapter methods/classes don’t need to be public (except for framework needs)
    Extract class from Test code requires two Moves: one to move to top level, another to move into production code directory.
    Refactor: find and replace duplicates
    Getting the test passing, even if by fluke, is fine.
    Didn’t have to type and misspell rank!
    StubDeck has dummy suit, so may not be obvious for what test assertions
    Cleanup
        Nice cleanup of StubDeck/Deck implementation
            Made Cards list protected (and non-final) instead of private
                Inheritance pushes us this way
        Finally fixed Card constructor order (faced our confusion and resolved it) so it makes sense: Rank then Suit
    Name classes for what makes sense now and try not to predict the future
Learnings
    Ctrl+P view parameter list for method/constructor (Cmd+P)
    For method with varargs, passing in nothing (no parameters) results in an array of length 0
        So we could remove empty constructor as redundant
Next Time
    Calculate in DB how many games won/lost by player
    Maybe add outcome in DB model
    Close tool windows when done (Cmd+Shift+F12 or Ctrl+Shift+F12)
    Try and wait for prediction before running tests (so hard!)


Retrospective: Ensemble FRI-PM #10 (June 10, 2022)
--------------------------------------------------
Thoughts/Observations
    DB representation of the Game, with the Hand, Deck, and Cards is more complex than initially thought
    Liked keeping it simple to start (encoding cards as string) instead of full set of tables
    Struggling with not going directly to a design that’s in my head
        Letting the TDD have the design emerge
        Refactoring to more elements before they’re needed keeps the code simpler
    Struggled with the first “blank screen” test for completely new behavior
        Parameterized tests helped triangulate to a Map
        Starting with inline code in the test method, then extract to method, then move to its own class
    Enjoyed focusing on the Card Encoder
    Typing worse than usual as Driver
    Card definition order
        Had assumptions about importance of order of parameters, Suit & Rank
    Breaking the work down into tiny pieces makes it easier to make progress
        Planning a list of things to do doesn’t mean we have to stick to that plan, but is useful
Learnings
    Map.ofEntries() when there’s more than 10 elements
    JPA (Hibernate) is very complex vs. Spring Data JDBC
    Don’t forget Change Signature refactoring
Next Time
    Turn on “Select first failed test when finished” in the Run window


Retrospective: Ensemble FRI-PM #9 (June 3, 2022)
------------------------------------------------
Thoughts, Observations
    Doing it the “right” way seemed slower?
    Doing it the “right” way seemed to be faster?
        But we are different people than last time
        Felt much smoother
        Lower anxiety than last time
        Certainly have more tests
    Still didn't commit as often as we'd like
    Definitely more fun this way
        Inlining, pushing out parameters, etc.
        +1 - refactoring golf
            how can I change this with just automated refactorings?
            Automated = generally safer
    Noticing “feature envy” like things
        assignId, save => assignAndSave
            Move
    Noticed behavior changing (or needing to change) with failing test for Game having ID already assigned upon save
    Using Optional correctly (like a “lightweight” collection)
    Smaller steps, writing tests more often as noticing they were needed
    Sometimes we noticed we needed to prepare before making a change
    Trying different ways
        Back up and try something else
Learnings
    F6 to move (requires parameters pushed out)
    CTRL+F6 (CMD+F6) to change signature
    Move initialization of field to constructor
    orElse(GameNotFound::new)
        ::new as a supplier
    Reminded that map.put() returns the object that it REPLACED (or null)
Next Time
    Notice when we’ve gone from RED to GREEN or code change GREEN to GREEN
        Ask “commit now?” after every refactor STEP
        ACN
    Close the unneeded windows, especially after `mob start` and when tests pass


Retrospective: Ensemble FRI-PM #8 (May 27, 2022)
------------------------------------------------
Thoughts, Observations
    What a ride!
    It’s really easy to get simple code wrong
        As well as overlooking a failing test?
    Sunk cost/loss aversion is real
        Should have reverted to a previous green commit?
    Still not sure how to decouple the ID generator from our tests and “push in” to the in memory repo
        Maybe those tests could be refactored first to get out of the situation
    Repository interface “contract” test
        Base class runs against whatever instance defined in the subclass
Learnings
    Saff Squeeze was neat
        No debugger needed!
Next Time
    Even more save point commits??


Retrospective: Ensemble FRI-PM #7 (May 20, 2022)
------------------------------------------------
Thoughts, Observations
    Nice to read through tests after refactoring to see that they still make sense, no duplication
    Nice to relax the driver/navigator and do some things (test review) in the Huddle
        Good to have more opinions for that kind of work
        Nice to reduce/eliminate some redundant assertions on the redirect
            Using the manual mutation testing to see what tests would fail and evaluate: keep or remove assertion
    It’s hard to avoid jumping to making big changes vs. smaller steps
    Extract methods and then form a new class vs. create the new class and find out what to move
        Fix Primitive Obsession
    Nice start on the Repository: refactor our way to it
        Hex Arch reminds us where things go
    When confused and you figure it out, make it so that you won’t be confused the same way in the future
        Not always easy
Learnings
    Navigation: announce “Left” or “Right” pane instead of the name of the class, so the Driver knows more quickly what you’re talking about
    Navigator: start with high-level intent, only provide more details when Driver needs them

Retrospective: Ensemble FRI-PM #6 (May 13, 2022)
------------------------------------------------
Thoughts, Observations
    New network cable needed
    Nice to see the feature completed!
        Surprise, we’re done!
            Can be anti-climatic
        And see partially done along the way vs. not working at all until it’s all done
        Lots of fun refactorings along the way
        Feature: see all completed games and/or in-progress games
    Going back to the code and tests to review for clean up and possibly more refactoring was useful
    Changed goal for what I thought we would modify after explaining it the second time
        Having the idea flow through multiple people’s heads does
            We catch differences in understanding
            We come to better solutions and understanding
    Noticed that we’re missing Object Protocol constraints in Player and Hand
        Which universe are we in?
Learnings
    Commit using IJ via CMD+K
        Two choices: modal or tool window


Retrospective: Ensemble FRI-PM #5 (May 6, 2022)
-----------------------------------------------
Thoughts, Observations
    Controller testing at a distance instead of testing closer to the object that is doing the work we’re actually testing
        This is part of the process, as long as you do the refactoring part
    Soumya was our only committer!
    Taking larger steps instead of smaller
        Thinking about the smallest next step we can take
    Writing code before tests is a hard habit to break
    Cleaning up our tests!
    Sometimes tests didn’t break when we added parameter to service methods
        Indicates missing tests?
    Try out more refactorings! Just try it!
        Experiment!
    Cleaned up new line/whitespace formatting in tests
    Cleaned up unused fields
Learnings
    Learning about the Spring MVC flow and Models
    “any var” in the Change Signature refactoring
    CTRL+N for Class and then CTRL+SHIFT+N for File and CTRL+SHIFT+ALT+N
    CTRL+SHIFT+A for Action
    F2 navigate to next “error” or “warning"
Next Time
    Commit more often
        As “save” points
        Helps focus on one thing at a time
    Code coverage for guidance on missing tests
    Close the TEST RUN tool window: if the tests pass, close it
    Close the Terminal when you’re done
    Code Inlay Hints: Code Vision - show usages, do NOT show committer
    Driver has permission to “tidy up”

Retrospective: Ensemble FRI-PM #4 (April 15, 2022)
--------------------------------------------------
Thoughts, Observations
    Prep machine for Ensemble
        +1
    Got distracted: not sure what to focus on as there were several options
    Making current direction clear
    Forgetting is NORMAL
    Higher level goal was clear
    Made progress forward
    Non-trivial API change, trying to take small steps is hard!
    Detective Work: read the WHOLE stack trace
        Make sure it’s clear what the problem is before trying to solve it
Learnings
    What was “assertThatThrownBy” again?
Next Time
    Update IntelliJ IDEA
    (When Ted says: re-clone and re-create the project)
    Feel free to request Huddle time
    Introduce ID generator via extract method -> move to class -> make injectable

Retrospective: Ensemble FRI-PM #3 (April 8, 2022)
-------------------------------------------------
Thoughts, Observations
    Interesting. 🤔
    Started out in the wrong direction, then after a full round, started over
    Hadn’t finished GameService “thought” and wasn’t ready to be used properly
    A nice break when test fixes were mechanical
    Identifying the right time to take a step back can be hard
    Undoing “manually” is hard
    Hard to do “big” changes in small steps
        Very tempting to just make the bigger change all at once
        Do the big change and then revert it and try to do it in smaller steps
    Fixing test without understanding the true cause of the problem doesn’t always work
Learnings
Next Time
    More explicit commits to provide “save/revert” points


Retrospective: Ensemble FRI-PM #2 (April 1, 2022)
-------------------------------------------------
Thoughts, Observations
    Went blank first round, a little strange feeling
    Failing Integration Test at the start of our Ensemble and was failing at the end
    Taking too big of a step can result in tests passing before they fail - going right to HashMap for the Game instead of smaller step of using Game field
        Was good that we recognized it and took a step back
Learnings
    Lots of shortcuts
        Take a little time to practice
        Cursor movement
        Selection
Next Time
    Can we: Default to not use ‘var’ for Extract Variable


Retrospective: Ensemble FRI-PM #1 (March 25, 2022)
--------------------------------------------------
Thoughts, Observations
    When took one step too far, TDD is about tiny little steps
        It’s not easy to identify those small steps!!
        Decided to fix the other tests that we broke, perhaps could have done something else?
            We could! So we went back and (sort of) tried again.
    New to the codebase, even though we’ve seen it before (memory fades!)
        The Ensemble will help remember for us (crowdsourced memory)
Learnings
    Lots of new stuff: IDE, language
    mob.sh is really cool!
